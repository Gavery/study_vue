事件：
    v-on:click/mouserover.....
    简写：
    @事件名：@click=""

    事件对象：$event事件对象
    事件冒泡：
            阻止冒泡：
                    a):event.cancelBubble=true;//阻止冒泡(原生)
                    b):@click.stop="show()"
    默认行为(默认事件)：
                    a):event.preventDefault();//阻止默认行为
                    b):@contextmenu.prevent="show()"
    键盘类事件：
                @keydown="show($event)"
                @keyUp

            
            常用键：
                    回车:
                        a):@keyup.13
                        b):@keyup.enter
                    上:@keyup/@keydown.up
                    下:@keyup/@keydown.down
                    左: @keyup/@keydown.left 
                    右: @keyup/@keydown.right
                    .....

-----------------------------------------------------------

属性：
    a): <img src="{{url}}">效果能出来，但是会报404错误
    b):<img v-bind:src="url"> vue使用这个（不会报错）
    简写：：src=""
------------------------------
class和style:
        :class="[red]"     //red是数据（vue对象中绑定的data数据）
        :class="[a,b,c...]"

        :class="{red:true,blue:false}" //red可以是值，也可以是数据
        ：class="{json}"//推荐
----------------------------------

        :style="[a,b]"
        :style="json"

------------------------------------------------------------------------
模板：
    {{msg}}   实现双向数据绑定
    {{*msg}}  只实现一次数据绑定
    {{{msg}}}  转义成html代码输出
----------------------------------------------------------------
过滤器 ：    过滤模板
        
        语法：{{msg|filter}}  {{'msg'|filter}}     {{'WELCOME'|lowercase}}
        传参： {{msg|filter "参数"}}  eg：{{12|currency '￥'}}
        upercase
        lowercase
        capitalize
        currency

        {{12|currency}}   $12.00
        {{12|currency “￥”}}   ￥12.00
----------------------------------------------------
交互：
    $http (ajax)
    如果vue想做交互，必须要引入vue-resource这个库文件
    
    get:
        获取一个普通的文本：
            this.$http.get("a.txt").then(function(res) {
                        alert(res.data);
                        alert(res.status);
                    }
                    , function(res) {
                        alert(res.status);//失败后的情况
                    }

        给服务器发送数据（用的最多的情况）：
             this.$http.get("a.php",{
                传递的参数（json格式）
                }).then(function(res) {
                        alert(res.data);
                        alert(res.status);
                    }
                    , function(res) {
                        alert(res.status);//失败后的情况
                    }
    post:
        this.$http.post("a.php",{
                        a:1,
                        b:2
                    },{
                        emulateJSON:true//post要有这个标记才能把数据传过去
                    }).then(function(res) {
                        alert(res.data);
                        // alert(res.status);
                    }
                    , function(res) {
                        alert(res.status);
                    }
    jsonp